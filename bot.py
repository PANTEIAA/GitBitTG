from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


# üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –Ø–Ω–¥–µ–∫—Å
EMAIL_SENDER = "artempanteleev83@yandex.ru"           # —Ç–≤–æ—è –Ø–Ω–¥–µ–∫—Å-–ø–æ—á—Ç–∞
EMAIL_PASSWORD = "dejedpgrhemgqxnp"     # –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
EMAIL_RECEIVER = "artempanteleev2004@gmail.com"  # –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏

def send_email(order_text):
    msg = MIMEMultipart()
    msg["From"] = EMAIL_SENDER
    msg["To"] = EMAIL_RECEIVER
    msg["Subject"] = "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram –±–æ—Ç–∞"

    msg.attach(MIMEText(order_text, "plain", "utf-8"))

    try:
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSL –∫ –Ø–Ω–¥–µ–∫—Å SMTP
        with smtplib.SMTP_SSL("smtp.yandex.ru", 465) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.send_message(msg)
        print("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", e)

# üîπ –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8358423233:AAFyUlknvq846kwCZrIyaiyK85g0YlLda4c"


# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# üîπ –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class Order(StatesGroup):
    name = State()
    phone = State()
    product = State()
    quantity = State()


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"]
    keyboard.add(*buttons)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=keyboard)


# üîπ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(lambda message: message.text == "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_products(message: types.Message):
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n1Ô∏è‚É£ –¢–æ–≤–∞—Ä A\n2Ô∏è‚É£ –¢–æ–≤–∞—Ä B\n3Ô∏è‚É£ –¢–æ–≤–∞—Ä C")


# üîπ –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@dp.message_handler(lambda message: message.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É")
async def create_order(message: types.Message):
    await Order.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


# üîπ –®–∞–≥ 1 ‚Äî –ò–º—è
@dp.message_handler(state=Order.name)
async def process_name(message: types.Message, state: FSMContext):
    if not message.text.isalpha() or len(message.text) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        return
    await state.update_data(name=message.text)
    await Order.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")



# üîπ –®–∞–≥ 2 ‚Äî –¢–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(state=Order.phone)
async def process_phone(message: types.Message, state: FSMContext):
    digits = ''.join(filter(str.isdigit, message.text))  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if len(digits) < 10:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä).")
        return
    await state.update_data(phone=digits)
    await Order.next()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–¢–æ–≤–∞—Ä A", "–¢–æ–≤–∞—Ä B", "–¢–æ–≤–∞—Ä C"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)



# üîπ –®–∞–≥ 3 ‚Äî –¢–æ–≤–∞—Ä
@dp.message_handler(state=Order.product)
async def process_product(message: types.Message, state: FSMContext):
    # —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    valid_products = ["–¢–æ–≤–∞—Ä A", "–¢–æ–≤–∞—Ä B", "–¢–æ–≤–∞—Ä C"]

    if message.text not in valid_products:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
        )
        # –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*valid_products)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
        return  # –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–ª–æ—Å—å

    # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    await state.update_data(product=message.text)
    await Order.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")


# üîπ –®–∞–≥ 4 ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.message_handler(state=Order.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return

    await state.update_data(quantity=int(message.text))
    data = await state.get_data()
    await state.finish()

    order_text = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {data['product']}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}"
    )

    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    send_email(order_text)


  # üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ø–æ—á—Ç—É
    send_email(order_text)


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
